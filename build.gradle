plugins {
    id 'application'
    id 'java'
//    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.23.3'
    id 'com.gluonhq.client-gradle-plugin' version '0.1.35'
}

group 'com.icuxika'
version '1.0.0'

repositories {
    mavenCentral()
    jcenter()
}

def platform
if (org.gradle.internal.os.OperatingSystem.current().windows) {
    platform = 'win'
} else if (org.gradle.internal.os.OperatingSystem.current().linux) {
    platform = 'linux'
} else if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
    platform = 'mac'
}

application {
    mainModule.set('sample')
    mainClass.set('com.icuxika.MainApp')
    applicationDefaultJvmArgs = [
            '--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix',
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED'
    ]
}

dependencies {
    implementation "org.openjfx:javafx-base:16:${platform}"
    implementation "org.openjfx:javafx-controls:16:${platform}"
    implementation "org.openjfx:javafx-graphics:16:${platform}"
    implementation "org.openjfx:javafx-fxml:16:${platform}"
    implementation "org.openjfx:javafx-swing:16:${platform}"
    implementation "org.openjfx:javafx-media:16:${platform}"
    implementation "org.openjfx:javafx-web:16:${platform}"

    implementation('com.squareup.okhttp3:okhttp:4.9.0')
    implementation('com.jfoenix:jfoenix:9.0.10')
    testImplementation("junit:junit:4.12")
}

//javafx {
//    version('16')
//    modules('javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing')
//}

jlink {
    options.set(List.of('--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages'))

    launcher {
        name = 'JavaFXSample'
        imageName.set('JavaFXSample')
    }

    imageZip.set(project.file('${project.buildDir}/image-zip/JavaFXSample.zip'))

    jpackage {
        outputDir = 'build-package'
        imageName = 'JavaFXSample'
        skipInstaller = false
        installerName = 'installer'
        appVersion = version.toString()

        imageOptions = List.of('--icon', 'src/main/resources/application.ico')

        // 不添加此参数，打包成exe后，https协议的网络图片资源无法加载
        jvmArgs.add('-Dhttps.protocols=TLSv1.1,TLSv1.2')
        jvmArgs.add('--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix')

        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
    }
}